with "aaa";
with "ada_toml";
with "alire_common";
with "ajunitgen";
with "ansi";
with "clic";
with "gnatcoll";
with "minirest";
with "optional";
with "semantic_versioning";
with "simple_logging";
with "si_units";
with "spdx";
with "stopwatch";
with "toml_slicer";
with "uri";
with "xml_ez_out";

library project Alire is

   for Library_Name use "alire";

   Src_Dirs := ("src/alire");

   case Alire_Common.Host_Os is
      when "windows" => Src_Dirs := Src_Dirs & ("src/alire/os_windows");
      when "osx"     => Src_Dirs := Src_Dirs & ("src/alire/os_macos");
      when others    => Src_Dirs := Src_Dirs & ("src/alire/os_linux");
   end case;

   package Naming is
      case Alire_Common.Host_OS is
         when "windows" =>
            for body ("Alire.Platforms.Current") use "alire-platforms-current__windows.adb";
            for body ("Alire.Platforms.Folders") use "alire-platforms-folders__windows.adb";
         when "osx"     =>
            for body ("Alire.Platforms.Current") use "alire-platforms-current__macos.adb";
            for body ("Alire.Platforms.Folders") use "alire-platforms-folders__macos.adb";
         when others    =>
            for body ("Alire.Platforms.Current") use "alire-platforms-current__linux.adb";
            for body ("Alire.Platforms.Folders") use "alire-platforms-folders__linux.adb";
      end case;
   end Naming;

   for Source_Dirs use Src_Dirs;

   for Library_Dir use "lib";
   for Object_Dir use "obj";

   for Languages use ("Ada");

   package Compiler renames Alire_Common.Compiler;
   package Builder renames Alire_Common.Builder;
   package Binder renames Alire_Common.Binder;
   package Ide renames Alire_Common.Ide;

end Alire;
