name: Release assets

on:
  create:
    tags: ['v*']
    
  release:
    types: [created]

jobs:

  ########
  # info #
  ########

  info:
    name: Print information
    runs-on: ubuntu-latest
    steps:
    - name: Print context
      run: echo Packaging for release ${{ github.ref }}
    - name: Print event
      run: echo Triggered by ${{ github.event_name }}

  ##################
  # create release #
  ##################

  create_release:
    name: Create release from tag
    runs-on: ubuntu-latest
    needs: info
    steps:
    - name: Create release (optional)
      if: github.event_name == 'create' # tag created, promote to release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false     # Must not be to be retrievable later
        prerelease: true # Require manual validation

  #########
  # Linux #
  #########

  linux:
    name: Prepare for ${{ matrix.tag }}
    runs-on: ubuntu-latest
    needs: create_release

    strategy:
      matrix:
        tag: # Those are our dockerhub alire/gnat:tag machines
            - centos-latest-community-latest
            - debian-stable
            - ubuntu-lts
            # - community-latest # Not really a target platform
    steps:
    - name: Check out repository
      uses: actions/checkout@v1

    - name: Check out submodules
      run: git submodule update --init --recursive

    - name: Pull docker image
      run: docker pull alire/gnat:${{ matrix.tag }}

    - name: Build
      run: >
        docker run -v${PWD}:/alire -w /alire
        -e "BRANCH=${{ github.base_ref }}" -e "INDEX=${{ env.alire_index }}"
        alire/gnat:${{ matrix.tag }} gprbuild -j0 -p -P alr_env

    - name: Package binaries
      run: zip alr-bin-${{ matrix.tag }}.zip bin/alr LICENSE.txt

    - name: Retrieve upload URL for the release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - id: get_version
      uses: battila7/get-version-action@v2

    - name: Upload binary assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr-bin-${{ matrix.tag }}.zip
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}-bin-${{ matrix.tag }}.zip
        asset_content_type: application/zip 

  ############
  # AppImage #
  ############

  appimage:
    name: Prepare AppImage
    runs-on: ubuntu-latest
    needs: create_release

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community

    - name: Build
      run: gprbuild -j0 -p -P alr_env

    - name: Install AppImage's linuxdeploy
      uses: miurahr/install-linuxdeploy-action@releases/v1
      with:
        plugins: appimage

    - name: Create AppImage
      run: >
        linuxdeploy-x86_64.AppImage --appdir AppDir -e bin/alr 
        -d resources/alr.desktop -i resources/alr.png --output appimage

    - name: Rename AppImage
      run: mv alr*AppImage alr.AppImage

    - name: Retrieve upload URL for the release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - id: get_version
      uses: battila7/get-version-action@v2

    - name: Upload AppImage asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr.AppImage
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}.AppImage
        asset_content_type: application/x-elf

  #########
  # macOS #
  #########

  macos:
    name: Prepare for macOS
    runs-on: macos-latest
    needs: create_release

    steps:
    - name: Check out repository
      uses: actions/checkout@v1

    - name: Check out submodules
      run: git submodule update --init --recursive

    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community

    - name: Build
      run: gprbuild -j0 -p -P alr_env
      shell: bash
      env:
        OS: macOS

    - name: Package binaries
      run: zip alr-bin-macos.zip bin/alr LICENSE.txt

    - name: Retrieve upload URL for the release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - id: get_version
      uses: battila7/get-version-action@v2

    - name: Upload binary assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr-bin-macos.zip
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}-bin-macos.zip
        asset_content_type: application/zip 

  ###########
  # Windows #
  ###########

  windows:
    name: Prepare for Windows
    runs-on: windows-latest
    needs: create_release

    steps:
    - name: Retrieve upload URL for the release
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Check out repository
      uses: actions/checkout@v1

    - name: Check out submodules
      run: git submodule update --init --recursive

    - name: Install toolchain
      uses: ada-actions/toolchain@ce2020
      with:
        distrib: community

    - name: Build alr
      run: gprbuild -j0 -p -P alr_env

    - name: alr first run to install msys2
      run: ./bin/alr --non-interactive help get

    - name: Install alr
      run: gprinstall -p -P alr_env --prefix=${{ runner.temp }}/alr_install

    - name: Install qt-installer-framework in msys2
      run: C:\Users\runneradmin\.cache\alire\msys64\usr\bin\pacman --noconfirm -S mingw64/mingw-w64-x86_64-qt-installer-framework

    - name: Add msys2 /mingw64/bin to the path (for qt-installer-framework)
      run: echo '::add-path::C:\Users\runneradmin\.cache\alire\msys64\mingw64\bin'

    - name: Install zip in msys2
      run: C:\Users\runneradmin\.cache\alire\msys64\usr\bin\pacman --noconfirm -S zip

    - name: Add msys2 /usr/bin to the path (for zip)
      run: echo '::add-path::C:\Users\runneradmin\.cache\alire\msys64\usr\bin'

    - name: Run installer build script
      run: bash make-alire-installer
      shell: bash
      working-directory: scripts/installer/
      env:
        ALR_INSTALL_DIR: ${{ runner.temp }}/alr_install
        ALR_INSTALL_OS: ${{ runner.os }}

    - name: Rename installer
      run: copy scripts/installer/alire-*.exe scripts/installer/alire-install.exe

    - id: get_version
      uses: battila7/get-version-action@v2

    - name: Upload installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: scripts/installer/alire-install.exe
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}-installer-windows.exe
        asset_content_type: application/vnd.microsoft.portable-executable

    - name: Package binaries
      run: zip alr-bin-windows.zip bin/alr LICENSE.txt

    - name: Upload binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr-bin-windows.zip
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}-bin-windows.zip
        asset_content_type: application/zip
