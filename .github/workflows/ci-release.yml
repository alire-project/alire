# These are the builds that get uploaded as releases. When this workflow is run
# from a regular PR, it stops before the release steps, but the checks are
# always performed.

name: Release

on:
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rst'
      - '**.txt'
  release:
    types: [published]
  workflow_dispatch:

env:
  alire_index: ""
  # Empty index: test with master of community index
  # Otherwise: test with particular commit/branch
  # e.g.: index: "git+https://github.com/alire-project/alire-index@deadbeef"
  MSYS64_ROOT:  C:\Users\runneradmin\AppData\Local\alire\cache\msys64
  MINGW64_PATH: C:\Users\runneradmin\AppData\Local\alire\cache\msys64\mingw64\bin
  MSYS2_PATH:   C:\Users\runneradmin\AppData\Local\alire\cache\msys64\usr\bin
  MSYS2_PACMAN: C:\Users\runneradmin\AppData\Local\alire\cache\msys64\usr\bin\pacman --noconfirm

jobs:

  #########
  # build #
  #########

  build:
    name: ${{ matrix.platform.id }}

    runs-on: ${{ matrix.platform.os }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: macos-13            # x64
            id: x86_64-macos

          - os: macos-latest        # arm64
            id: aarch64-macos

          - os: ubuntu-20.04        # x64, oldest supported so releases can run on older distros
            id: x86_64-linux

          - os: ubuntu-24.04-arm    # new ARM runners
            id: aaarch64-linux

          - os: windows-latest
            id: x86_64-windows

    steps:

    - name: Check out repository
      uses: actions/checkout@v4
      with:
        submodules: true

    # Install GNAT, we only need a system one for Ubuntu ARM until we have
    # Alire-indexed releases for it.

    - name: Install Alire toolchain
      if: matrix.platform.id != 'aaarch64-linux'
      uses: alire-project/alr-install@v2
      with:
        crates: gnat_native gprbuild
        prefix: alire_prefix

    - name: Install system toolchain (Ubuntu ARM)
      if: matrix.platform.id == 'aaarch64-linux'
      run: |
        sudo apt-get install -y gnat gprbuild
        echo ALIRE_TESTSUITE_DISABLE_DOCKER=true >> $GITHUB_ENV
      # GNAT 10 has a bug that fails in the testsuite. Also, we need to disable
      # Docker tests on Ubuntu ARM.

    - name: Check toolchain architecture
      uses: mosteo-actions/gnat-toolchain-arch-checker@v1

    - name: Install Python 3.x (required for the testsuite)
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    # The test script itself will build alr

    - name: Run test script
      run: scripts/ci-github.sh test=false # REMOVE BEFORE MERGING
      shell: bash
      env:
        BRANCH: ${{ github.base_ref }}
        INDEX: ""

    # Ascertain whether alr can run without the toolchain that built it

    - name: Remove system GNAT (Ubuntu ARM)
      if: matrix.platform.id == 'aaarch64-linux'
      run: sudo apt-get remove -y gnat-13 gprbuild
      shell: bash

    - name: Check standalone alr
      uses: mosteo-actions/alr-standalone-checker@v1
      with:
        alr_path: bin
        toolchain_path: alire_prefix

    # Artifacts from test run

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: alr-bin-${{matrix.platform.id}}.zip
        path: |
          bin/alr*
          LICENSE.txt

    - name: Upload logs (if failed)
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: e3-log-${{matrix.platform.id}}.zip
        path: testsuite/out

  ###########
  # release #
  ###########

  #####################
  # windows-installer #
  #####################

  windows-installer:
    name: Windows installer
    runs-on: windows-latest
    needs: build

    steps:

    - name: Check out repository
      uses: actions/checkout@v4
      # We need it for the installer scripts. We don't need submodules now though.

    - name: Download built alr
      uses: actions/download-artifact@v4
      with:
        name: alr-bin-x86_64-windows.zip

    # We need to install MSYS2 again. This is a bit wasteful since the build
    # job already did it, but at least this way things are more clearly
    # separated. If we rely on an existing Alire, we might hit the cache rather
    # than always reinstalling from scratch. So, rather than using setup-alire,
    # we use again alr-install, already used in the build job, to maximize
    # chances of a cache hit.

    - name: Set up stable Alire (for MSYS2)
      uses: alire-project/setup-alire@v4

    - name: Check MSYS2 installation
      run: bin/alr version
      shell: bash

    - name: Install qt-installer-framework in msys2
      run: ${{env.MSYS2_PACMAN}} -S mingw64/mingw-w64-x86_64-qt-installer-framework

    - name: Add msys2 /mingw64/bin to the path (for qt-installer-framework)
      run: echo '${{env.MINGW64_PATH}}' >> $GITHUB_PATH
      shell: bash

    - name: Install zip in msys2
      run: ${{env.MSYS2_PACMAN}} --noconfirm -S zip

    - name: Add msys2 /usr/bin to the path (for zip)
      run: echo '${{env.MSYS2_PATH}}' >> $GITHUB_PATH
      shell: bash

    - name: Run installer build script
      run: bash make-alire-installer
      shell: bash
      working-directory: scripts/installer/
      env:
        ALR_INSTALL_DIR: ${{ runner.temp }}/alr_install
        ALR_INSTALL_OS: ${{ runner.os }}

    - name: Upload installer
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer.exe
        path: scripts/installer/alire-*.exe

    - name: Upload zip archive
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer.zip
        path: scripts/installer/alire-*.zip

    - name: Upload tar archive
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer.tar.xz
        path: scripts/installer/alire-*.tar.xz