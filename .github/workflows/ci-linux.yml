name: CI linux

on:
  pull_request:
    paths-ignore:
      - 'doc/**'
      - '**.md'
      - '**.rst'
      - '**.txt'
  release:
    types: [created]

env:
  alire_index: ""
  # Empty index: test with master of community index
  # Otherwise: test with particular commit/branch
  # e.g.: index: "git+https://github.com/alire-project/alire-index@deadbeef"

jobs:

  build:
    name: CI on ${{ matrix.tag }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        tag: # Those are our dockerhub alire/gnat:tag machines
            - centos-latest-community-latest
            - community-latest
            - debian-stable
            - ubuntu-lts

    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Pull docker image
      run: docker pull alire/gnat:${{ matrix.tag }}

    - name: Run test script
      run: >
        docker run -v${PWD}:/alire -w /alire
        -e "BRANCH=${{ github.base_ref }}" -e "INDEX=${{ env.alire_index }}"
        alire/gnat:${{ matrix.tag }} scripts/ci-github.sh

    - name: Upload binaries
      uses: actions/upload-artifact@v2
      with:
        name: alr-bin-${{ matrix.tag }}.zip
        path: |
          bin/alr
          LICENSE.txt

    - name: Upload logs (if failed)
      if: failure()
      uses: actions/upload-artifact@master
      with:
        name: e3-log-${{ matrix.tag }}.zip
        path: testsuite/out

    # Release steps start here. These only run during a release creation.

    - name: Package binaries
      if: (github.event_name == 'release') && (matrix.tag != 'community-latest')
      run: zip alr-bin-${{ matrix.tag }}.zip bin/alr LICENSE.txt

    - name: Retrieve upload URL for the release
      if: (github.event_name == 'release') && (matrix.tag != 'community-latest')
      id: get_release
      uses: bruceadams/get-release@v1.2.1
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Get release version
      if: (github.event_name == 'release') && (matrix.tag != 'community-latest')
      id: get_version
      uses: battila7/get-version-action@v2

    - name: Upload binary assets
      if: (github.event_name == 'release') && (matrix.tag != 'community-latest')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr-bin-${{ matrix.tag }}.zip
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}-bin-${{ matrix.tag }}.zip
        asset_content_type: application/zip

    ############
    # AppImage #
    ############

    - name: Install AppImage's linuxdeploy
      if: (github.event_name == 'release') && (matrix.tag == 'ubuntu-lts')
      uses: miurahr/install-linuxdeploy-action@releases/v1
      with:
        plugins: appimage

    - name: Copy license into AppImage
      if: (github.event_name == 'release') && (matrix.tag == 'ubuntu-lts')
      run: |
        mkdir -p AppDir
        cp LICENSE.txt AppDir/

    - name: Create AppImage
      if: (github.event_name == 'release') && (matrix.tag == 'ubuntu-lts')
      run: >
        linuxdeploy-x86_64.AppImage --appdir AppDir -e bin/alr 
        -d resources/alr.desktop -i resources/alr.png --output appimage

    - name: Rename AppImage
      if: (github.event_name == 'release') && (matrix.tag == 'ubuntu-lts')
      run: mv alr*AppImage alr.AppImage

    - name: Upload AppImage asset
      if: (github.event_name == 'release') && (matrix.tag == 'ubuntu-lts')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        asset_path: alr.AppImage
        asset_name: alr-${{ steps.get_version.outputs.version-without-v }}.AppImage
        asset_content_type: application/x-elf
